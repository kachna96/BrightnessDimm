#pragma once

#include "PhysicalMonitorEnumerationAPI.h"
#include <string>

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Gets the brightness. </summary>
///
/// <remarks>	Ondrej Kacmar, 11/07/2017. </remarks>
///
/// <param name="monitor">	Handle of the monitor. </param>
///
/// <returns>	The brightness. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

int getBrightness(HANDLE monitor);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Sets the brightness. </summary>
///
/// <remarks>	Ondrej Kacmar, 11/07/2017. </remarks>
///
/// <param name="monitor">	Handle of the monitor. </param>
/// <param name="value">  	Desired Brightness. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void setBrightness(HANDLE monitor, long value);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Gets color temperature. </summary>
///
/// <remarks>	Ondrej Kacmar, 11/07/2017. </remarks>
///
/// <param name="monitor">	Handle of the monitor. </param>
///
/// <returns>	The color temperature. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

std::string getColorTemperature(HANDLE monitor);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Sets color temperature. </summary>
///
/// <remarks>	Ondrej Kacmar, 11/07/2017. </remarks>
///
/// <param name="monitor">	  	Handle of the monitor. </param>
/// <param name="temperature">	Desired color temperature. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void setColorTemperature(HANDLE monitor, MC_COLOR_TEMPERATURE temperature);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Gets a contrast. </summary>
///
/// <remarks>	Ondrej Kacmar, 11/07/2017. </remarks>
///
/// <param name="monitor">	Handle of the monitor. </param>
///
/// <returns>	Null if it fails, else the contrast. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

DWORD *getContrast(HANDLE monitor);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Sets a contrast. </summary>
///
/// <remarks>	Ondrej Kacmar, 11/07/2017. </remarks>
///
/// <param name="monitor">	Handle of the monitor. </param>
/// <param name="value">  	Desired contrast. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void setContrast(HANDLE monitor, DWORD value);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Degauss the given monitor. </summary>
///
/// <remarks>	Ondrej Kacmar, 11/07/2017. </remarks>
///
/// <param name="monitor">	Handle of the monitor. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void degauss(HANDLE monitor);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Gets technology type. </summary>
///
/// <remarks>	Ondrej Kacmar, 11/07/2017. </remarks>
///
/// <param name="monitor">	Handle of the monitor. </param>
///
/// <returns>	The technology type. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

std::string getTechnologyType(HANDLE monitor);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Gets red green or blue drive. </summary>
///
/// <remarks>	Ondrej Kacmar, 11/07/2017. </remarks>
///
/// <param name="monitor">	Handle of the monitor. </param>
///
/// <returns>	Null if it fails, else array of red, green and blue drive values. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

DWORD *getRedGreenOrBlueDrive(HANDLE monitor);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Sets red green or blue drive. </summary>
///
/// <remarks>	Ondrej Kacmar, 11/07/2017. </remarks>
///
/// <param name="monitor">	Handle of the monitor. </param>
/// <param name="type">   	Type of color. </param>
/// <param name="value">  	Desired value. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void setRedGreenOrBlueDrive(HANDLE monitor, std::string type, int value);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Gets red green or blue gain. </summary>
///
/// <remarks>	Ondrej Kacmar, 11/07/2017. </remarks>
///
/// <param name="monitor">	Handle of the monitor. </param>
///
/// <returns>	Null if it fails, else array of red, green and blue drive values. </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

DWORD *getRedGreenOrBlueGain(HANDLE monitor);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Sets red green or blue gain. </summary>
///
/// <remarks>	Ondrej Kacmar, 11/07/2017. </remarks>
///
/// <param name="monitor">	Handle of the monitor. </param>
/// <param name="type">   	Type of color. </param>
/// <param name="value">  	Desired value. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void setRedGreenOrBlueGain(HANDLE monitor, std::string type, int value);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Resets the factory color defaults described by monitor. </summary>
///
/// <remarks>	Ondrej Kacmar, 11/07/2017. </remarks>
///
/// <param name="monitor">	Handle of the monitor. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void resetFactoryColorDefaults(HANDLE monitor);

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary>	Resets the factory defaults described by monitor. </summary>
///
/// <remarks>	Ondrej Kacmar, 11/07/2017. </remarks>
///
/// <param name="monitor">	Handle of the monitor. </param>
////////////////////////////////////////////////////////////////////////////////////////////////////

void resetFactoryDefaults(HANDLE monitor);